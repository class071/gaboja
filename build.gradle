buildscript {
	dependencies {
		classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.8"
	}
}

plugins {
	id 'org.springframework.boot' version '2.7.1'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id "org.asciidoctor.jvm.convert" version "3.3.2" // rest
	id 'org.sonarqube' version '3.4.0.2513'
}

group = 'com.daily'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

apply plugin: 'jacoco'

jacoco {
	toolVersion = '0.8.8'
}

jacocoTestReport {
	reports {
		html.enabled true
		csv.enabled true
		xml.enabled true
	}
}

apply plugin: "org.sonarqube"

sonarqube {
	properties {
		property 'sonar.host.url', 'http://localhost:9000/'
		property 'sonar.login', 'sqp_f02aea04809d833f260cc9b8da09e5644d338b01'
		property 'sonar.sources', 'src'
		property 'sonar.language', 'java'
		property 'sonar.projectVersion', '1.1.0-SNAPSHOT'
		property 'sonar.sourceEncoding', 'UTF-8'
		property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/test/jacocoTestReport.xml'
		property 'sonar.java.binaries', 'build/classes'
		property 'sonar.test.inclusions', '**/*Test.java'
		property 'sonar.exclusions', '**/test/**, **/Q*.java, **/*Doc*.java, **/resources/**'
	}
}

configurations {
	asciidoctorExtensions // rest
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

// REST DOCS SETTING
ext {
	snippetsDir = file('build/generated-snippets')
}

dependencies {
	implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1'
	implementation 'org.modelmapper:modelmapper:3.1.0'
	implementation("org.mariadb.jdbc:mariadb-java-client")
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.3'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.10.7'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.10.7'
	implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.junit.jupiter:junit-jupiter:5.4.2'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	// rest
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
}

test {
	outputs.dir snippetsDir
	useJUnitPlatform()
	jacoco {
		enabled = true
		destinationFile = file("$buildDir/jacoco/${name}.exec")
		includes = []
		excludes = []
		excludeClassLoaders = []
		includeNoLocationClasses = false
		sessionId = "<auto-generated value>"
		dumpOnExit = true
		classDumpDir = null
		output = JacocoTaskExtension.Output.FILE
		address = "localhost"
		port = 6300
		jmx = false
	}
}

asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
}

bootJar {
	dependsOn asciidoctor
	copy {
		from "${asciidoctor.outputDir}"
		into 'BOOT-INF/classes/static/docs'
	}
}

asciidoctor.doFirst {
	delete file('src/main/resources/static/docs')
}

task copyDocument(type: Copy) {
	dependsOn asciidoctor
	from file("build/docs/asciidoc")
	into file("src/main/resources/static/docs")
}

build {
	dependsOn copyDocument
}